{"name":"LightOJ Solutions","tagline":"My solutions for LIGHTOJ","body":"###1002 - Country Roads\r\nYou need to use a modification of Dijkstra's algorithm for solving thr peorblem. They key catch is in Dijkstra we use \r\n\r\n`a[i][j] + d[i] < d[j]`\r\n`d[j] = a[i][j] + d[i]`\r\n\r\nWhile here we should use\r\n\r\n`max(a[i][j], d[i]) < d[j]`\r\n`d[j] = max(a[i][j], d[i])`\r\n\r\n###1003 - Drunk\r\nThe task is to check whether cycle exists in the directed graph. If cycle exists he can't drink all. You can use a hash function or map to convert the drinks to numbers. Once converted use DFS or a suitable algo for checking the existance of cycles. I used `DFS` for the search of cycles. \r\n\r\n###1004 - Monkey Banana Problem\r\nThis is a basic Dynamic Programming problem. The tricky part is to write the loops. While calculating the maximum bananas the second inner loop will run forward till i < n and for the remaining it would run backward. Check the solution for understanding the logic behind this. \r\n\r\n###1006 - Hex-a-bonacci\r\nThis question is quite simple and straight forward as compared to the previous questions. All you need to dos is to replace the recursion with a for loop. Also make sure to take the modulo before storing the values in array as the values can be quite large\r\n\r\n###1007 - Mathematically Hard\r\nYou should take exereme care while solving this problem. The input require very first IO method. Scanf and Printf would be the best choice if you are using C++. You can need to use a modified version of the Sieve method for cracking the problem. The approach I used was to first store the prime numbers using the sieve method and then to use a sieve like method to calculate `phi of n`. Take extra care to use `llu` while printing out the answer as the output is in the range of unsigned long long.\r\n\r\n###1008 - Fibsieve`s Fantabulous Birthday \r\nTry to find the pattern in which the numbers are appearing. If you look carefully you can obtain the pattern and device an formula to find the coordinates. \r\n\r\n###1009 - Back to Underworld\r\nI didn't use any normal graph algorithm for solving this problem. Even tough the problem uses a little concept of connected componenents. Try approaching the problem by considering the rivals as nodes in a graph. Check the code if you are stuck for a long time\r\n\r\n###1011 - Marriage Ceremonies \r\nThis is a normal Memoization with Bit masking type problem. Normal recursion without memoization causes a TLE. \r\n\r\n###1012 - Guilty Prince\r\nThis is one is a really simple graph problem. Keep marking the visited nodes to avoid visiting them again\r\n\r\n###1014 - Ifter Party\r\nThis is also a normal Ad-Hoc problem. The simplified task is to find the divisors of p - l which are greater than l.\r\n\r\n###1016 - Brush II\r\nThis is yet another adhoc problem. What you need to do is to ietrate over all the y points in ascending order in such a way that you increase the counter only when the difference of ym, ym+1, ....yn becomes greater than w. The counter would give you the answer. \r\n\r\n###1019 - Brush IV\r\nThis is a trivial application of Shortest Path algorithms. Implementing Floyd Warshal solution for this can accept the solution in a few lines of code\r\n\r\n###1020 - A Childhood game\r\nThis is a problem under Game theory. You can write the solution for this problem by just observing the pattern of win or loss. If Alice is taking the stone first she will get a win for 0, 2, 3, 5 .... and loss for 1, 4, 7 .... You can easily use this observation for solving the problem. \r\n\r\n###1022 - Circle in Square\r\nThe only tricky part in this question is to use double for all the calculations. Always use double instead of float in programming contests. \r\n\r\n###1023 - Discovering Permutations\r\nThis is a pretty simple questions. You can use the C++ `next_permutation` for cracking this problem in a few lines of code\r\n\r\n###1025 - The Specials Menu\r\nThis is a dp problem\r\n\r\n###1027 - A Dangerous Maze \r\nThe below example have been taken from the forum\r\n\r\nLet's consider test case #3:\r\n\r\n3\r\n3 -6 -9\r\n\r\n\r\nThere are 3 doors, and we are to find the expected amount of time it will take to get out of the maze. Let's call that expected value E. Now, E has to be equal to the average of the times that it takes to get out from each door, correct? Let's say T1 is the amount of time to get out of the maze when taking door #1, and T2 and T3 are defined similarly. Then:\r\n\r\n`E = (T1 + T2 + T3) / 3`\r\n\r\n\r\nIt's easy to see that T1 is 3, but what about T2 and T3? You can think about it like this: if you take door number 2, you will spend 6 minutes going through the maze, and you end up at the starting point, and from there, how much time will it take you to get out? Well, E is the expected time it will take you to get out from the start, right? So, you can say:\r\n\r\n`T2 = 6 + E\r\nT3 = 9 + E`\r\n\r\n\r\nPutting all that together, the original equation becomes:\r\n\r\n`E = 3/3 + (6/3 + E/3) + (9/3 + E/3`\r\n`E = 6 + 2E/3`\r\n`E/3 = 6`\r\n`E = 18`\r\n\r\nNow convert the logic into simple code\r\n\r\n\r\n###1028 - Trailing Zeroes (I) \r\nIf a number can be expressed as p1 ^ c1 * p2 ^ c2 * ..... pn ^ cn where p1 .. pn are the prime factors and c1 ... cn are the powers of the factors, then the total number of divisors of the number is given by \r\n\r\n`n = (c1 + 1) * (c2 + 1) * ... * (cn + 1)`\r\n\r\nCheck the code carefully for the implementation\r\n\r\n###1029 - Civil and Evil Engineer \r\nThis is a simple application of minimum spanning trees. Use a priority queue for reducing the time complexity.\r\n\r\n###1033 - Generating Palindromes\r\nFind the LCS of the given string and the reverse string. Then subtract the LCS from the actual length of the string. Find LCS using DP.  \r\n\r\n###1034 - Hit the Light Switches\r\nUse Kosaraju’s algorithm for finding the connected componenets of the directed Graph. In Kosaraju’s algorithm we perform the second DFS in the transpose graph. Skipping the creation of transpose graph result in the generation of cconnected componenents instead of the `SCC` which is exactly we want\r\n\r\n###1035 - Intelligent Factorial Factorization\r\nI don't think you would need any hint for soloving this question. Don't try to generate factorial to solve this question. \r\n\r\n###1037 - Agent 47\r\nThis can be solved using bit masking. Write a recurise solution and save the states. \r\n\r\n###1040 - Donation\r\nUse Prims MST algorithm accordingly for solving this problem. \r\n\r\n###1041 - Road Construction\r\nFirst you need to find the connected components of the graph. Then you need apply PRIMS MST in the connected components to find the minimum cost. \r\n\r\n###1042 - Secret Origins\r\nThis is an adhoc problem. Don't bruteforce. See how the bits changes from input to output answer. \r\n\r\n###1045 - Digits Of A  Factorial\r\nYou can find the number of digits required ny taking log of the factorial. This is equalent to \r\n`log(N!) = log(1) + log(2) + .... + log(N)`\r\nPrecompute and store the values to avoid doing repetetive tasks. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}